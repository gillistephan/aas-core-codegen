// Code generated by aas-core-codegen. DO NOT EDIT.

package aascore

// Single extension of an element.
type Extension struct {
	SemanticId *ReferenceData
	Name       string
	ValueType  *DataTypeDef
	Value      *string
	RefersTo   *ReferenceData
}

type Referable struct {
	Extensions  []*Extension
	IdShort     *string
	DisplayName *LangStringSet
	Category    *string
	Description *LangStringSet
}

// ReferableData is a generic data type used for encoding and decoding Referable
// holding all possible types as pointer
type ReferableData struct {
	*AnnotatedRelationshipElement
	*AssetAdministrationShell
	*BasicEvent
	*Blob
	*Capability
	*ConceptDescription
	*Entity
	*File
	*MultiLanguageProperty
	*Operation
	*Property
	*Range
	*ReferenceElement
	*Submodel
	*SubmodelElementList
	*SubmodelElementStruct
	*View
}

// Enumeration for denoting whether an element is a template or an instance.
type ModelingKind int32

const (
	ModelingKind_Template ModelingKind = iota
	ModelingKind_Instance
)

var ModelingKind_name = map[ModelingKind]string{
	0: "Template",
	1: "Instance",
}

var ModelingKind_value = map[string]ModelingKind{
	"Template": 0,
	"Instance": 1,
}

func (s ModelingKind) String() string {
	return ModelingKind_name[s]
}

// Administrative meta-information for an element like version information.
type AdministrativeInformation struct {
	DataSpecifications []*ReferenceData
	Version            *string
	Revision           *string
}

type Constraint struct {
}

// ConstraintData is a generic data type used for encoding and decoding Constraint
// holding all possible types as pointer
type ConstraintData struct {
	*Formula
	*Qualifier
}

// A qualifier is a type-value-pair that makes additional statements w.r.t.  the value
// of the element.
type Qualifier struct {
	SemanticId *ReferenceData
	Type       string
	ValueType  DataTypeDef
	Value      *string
	ValueId    *ReferenceData
}

// A formula is used to describe constraints by a logical expression.
type Formula struct {
	DependsOn []*ReferenceData
}

// Structure a digital representation of an asset.
type AssetAdministrationShell struct {
	DataSpecifications []*ReferenceData
	Extensions         []*Extension
	IdShort            *string
	DisplayName        *LangStringSet
	Category           *string
	Description        *LangStringSet
	Id                 string
	Administration     *AdministrativeInformation
	DerivedFrom        *AssetAdministrationShell
	AssetInformation   *AssetInformation
	Submodels          []*Submodel
}

// Identifying meta data of the asset that is represented by an AAS.
type AssetInformation struct {
	AssetKind        AssetKind
	GlobalAssetId    *ReferenceData
	SpecificAssetId  *IdentifierKeyValuePair
	DefaultThumbnail *File
}

// Enumeration for denoting whether an element is a type or an instance.
type AssetKind int32

const (
	AssetKind_Type AssetKind = iota
	AssetKind_Instance
)

var AssetKind_name = map[AssetKind]string{
	0: "Type",
	1: "Instance",
}

var AssetKind_value = map[string]AssetKind{
	"Type":     0,
	"Instance": 1,
}

func (s AssetKind) String() string {
	return AssetKind_name[s]
}

// An IdentifierKeyValuePair describes a generic identifier as key-value pair.
type IdentifierKeyValuePair struct {
	SemanticId        *ReferenceData
	Key               string
	Value             string
	ExternalSubjectId *ReferenceData
}

// A submodel defines a specific aspect of the asset represented by the AAS.
type Submodel struct {
	DataSpecifications []*ReferenceData
	Kind               *ModelingKind
	SemanticId         *ReferenceData
	Qualifiers         []*ConstraintData
	Extensions         []*Extension
	IdShort            *string
	DisplayName        *LangStringSet
	Category           *string
	Description        *LangStringSet
	Id                 string
	Administration     *AdministrativeInformation
	SubmodelElements   []*SubmodelElementData
}

type SubmodelElement struct {
	DataSpecifications []*ReferenceData
	Extensions         []*Extension
	IdShort            *string
	DisplayName        *LangStringSet
	Category           *string
	Description        *LangStringSet
	Kind               *ModelingKind
	SemanticId         *ReferenceData
	Qualifiers         []*ConstraintData
}

// SubmodelElementData is a generic data type used for encoding and decoding SubmodelElement
// holding all possible types as pointer
type SubmodelElementData struct {
	*AnnotatedRelationshipElement
	*BasicEvent
	*Blob
	*Capability
	*Entity
	*File
	*MultiLanguageProperty
	*Operation
	*Property
	*Range
	*ReferenceElement
	*SubmodelElementList
	*SubmodelElementStruct
}

// A submodel element list is an ordered collection of submodel elements.
type SubmodelElementList struct {
	DataSpecifications        []*ReferenceData
	Extensions                []*Extension
	IdShort                   *string
	DisplayName               *LangStringSet
	Category                  *string
	Description               *LangStringSet
	Kind                      *ModelingKind
	SemanticId                *ReferenceData
	Qualifiers                []*ConstraintData
	SubmodelElementTypeValues SubmodelElements
	Values                    []*SubmodelElementData
	SemanticIdValues          *ReferenceData
	ValueTypeValues           *DataTypeDef
}

// A submodel element struct is is a logical encapsulation of multiple values. It has
// a number of of submodel elements.
type SubmodelElementStruct struct {
	DataSpecifications []*ReferenceData
	Extensions         []*Extension
	IdShort            *string
	DisplayName        *LangStringSet
	Category           *string
	Description        *LangStringSet
	Kind               *ModelingKind
	SemanticId         *ReferenceData
	Qualifiers         []*ConstraintData
	Values             []*SubmodelElementData
}

type DataElement struct {
	DataSpecifications []*ReferenceData
	Extensions         []*Extension
	IdShort            *string
	DisplayName        *LangStringSet
	Category           *string
	Description        *LangStringSet
	Kind               *ModelingKind
	SemanticId         *ReferenceData
	Qualifiers         []*ConstraintData
}

// DataElementData is a generic data type used for encoding and decoding DataElement
// holding all possible types as pointer
type DataElementData struct {
	*Blob
	*File
	*MultiLanguageProperty
	*Property
	*Range
	*ReferenceElement
}

// A property is a data element that has a single value.
type Property struct {
	DataSpecifications []*ReferenceData
	Extensions         []*Extension
	IdShort            *string
	DisplayName        *LangStringSet
	Category           *string
	Description        *LangStringSet
	Kind               *ModelingKind
	SemanticId         *ReferenceData
	Qualifiers         []*ConstraintData
	ValueType          DataTypeDef
	Value              *string
	ValueId            *ReferenceData
}

// A property is a data element that has a multi-language value.
type MultiLanguageProperty struct {
	DataSpecifications []*ReferenceData
	Extensions         []*Extension
	IdShort            *string
	DisplayName        *LangStringSet
	Category           *string
	Description        *LangStringSet
	Kind               *ModelingKind
	SemanticId         *ReferenceData
	Qualifiers         []*ConstraintData
	Translatable       *LangStringSet
	ValueId            *ReferenceData
}

// A range data element is a data element that defines a range with min and max.
type Range struct {
	DataSpecifications []*ReferenceData
	Extensions         []*Extension
	IdShort            *string
	DisplayName        *LangStringSet
	Category           *string
	Description        *LangStringSet
	Kind               *ModelingKind
	SemanticId         *ReferenceData
	Qualifiers         []*ConstraintData
	ValueType          DataTypeDef
	Min                *string
	Max                *string
}

// A reference element is a data element that defines a logical reference to another
// element within the same or another AAS or a reference to an external object or
// entity.
type ReferenceElement struct {
	DataSpecifications []*ReferenceData
	Extensions         []*Extension
	IdShort            *string
	DisplayName        *LangStringSet
	Category           *string
	Description        *LangStringSet
	Kind               *ModelingKind
	SemanticId         *ReferenceData
	Qualifiers         []*ConstraintData
	Reference          *ReferenceData
}

// A BLOB is a data element that represents a file that is contained with its source
// code in the value attribute.
type Blob struct {
	DataSpecifications []*ReferenceData
	Extensions         []*Extension
	IdShort            *string
	DisplayName        *LangStringSet
	Category           *string
	Description        *LangStringSet
	Kind               *ModelingKind
	SemanticId         *ReferenceData
	Qualifiers         []*ConstraintData
	MimeType           string
	Content            *[]byte
}

// A File is a data element that represents an address to a file.
// The value is an URI that can represent an absolute or relative path.
type File struct {
	DataSpecifications []*ReferenceData
	Extensions         []*Extension
	IdShort            *string
	DisplayName        *LangStringSet
	Category           *string
	Description        *LangStringSet
	Kind               *ModelingKind
	SemanticId         *ReferenceData
	Qualifiers         []*ConstraintData
	MimeType           string
	Value              *string
}

// An annotated relationship element is a relationship element that can be annotated
// with additional data elements.
type AnnotatedRelationshipElement struct {
	DataSpecifications []*ReferenceData
	Extensions         []*Extension
	IdShort            *string
	DisplayName        *LangStringSet
	Category           *string
	Description        *LangStringSet
	Kind               *ModelingKind
	SemanticId         *ReferenceData
	Qualifiers         []*ConstraintData
	First              *ReferenceData
	Second             *ReferenceData
	Annotation         []*DataElementData
}

// Enumeration for denoting whether an entity is a self-managed entity or a co-managed
// entity.
type EntityType int32

const (
	EntityType_Co_managed_entity EntityType = iota
	EntityType_Self_managed_entity
)

var EntityType_name = map[EntityType]string{
	0: "Co_managed_entity",
	1: "Self_managed_entity",
}

var EntityType_value = map[string]EntityType{
	"Co_managed_entity":   0,
	"Self_managed_entity": 1,
}

func (s EntityType) String() string {
	return EntityType_name[s]
}

// An entity is a submodel element that is used to model entities.
type Entity struct {
	DataSpecifications []*ReferenceData
	Extensions         []*Extension
	IdShort            *string
	DisplayName        *LangStringSet
	Category           *string
	Description        *LangStringSet
	Kind               *ModelingKind
	SemanticId         *ReferenceData
	Qualifiers         []*ConstraintData
	EntityType         EntityType
	Statements         []*SubmodelElementData
	GlobalAssetId      *ReferenceData
	SpecificAssetId    *IdentifierKeyValuePair
}

// A basic event.
type BasicEvent struct {
	DataSpecifications []*ReferenceData
	Extensions         []*Extension
	IdShort            *string
	DisplayName        *LangStringSet
	Category           *string
	Description        *LangStringSet
	Kind               *ModelingKind
	SemanticId         *ReferenceData
	Qualifiers         []*ConstraintData
	Observed           *Referable
}

// An operation is a submodel element with input and output variables.
type Operation struct {
	DataSpecifications []*ReferenceData
	Extensions         []*Extension
	IdShort            *string
	DisplayName        *LangStringSet
	Category           *string
	Description        *LangStringSet
	Kind               *ModelingKind
	SemanticId         *ReferenceData
	Qualifiers         []*ConstraintData
	InputVariables     []*OperationVariable
	OutputVariables    []*OperationVariable
	InoutputVariables  []*OperationVariable
}

// An operation variable is a submodel element that is used as input or output variable
// of an operation.
type OperationVariable struct {
	Value *SubmodelElementData
}

// A capability is the implementation-independent description of the potential of an
// asset to achieve a certain effect in the physical or virtual world.
type Capability struct {
	DataSpecifications []*ReferenceData
	Extensions         []*Extension
	IdShort            *string
	DisplayName        *LangStringSet
	Category           *string
	Description        *LangStringSet
	Kind               *ModelingKind
	SemanticId         *ReferenceData
	Qualifiers         []*ConstraintData
}

// The semantics of a property or other elements that may have a semantic description
// is defined by a concept description. The description of the concept should follow a
// standardized schema (realized as data specification template).
type ConceptDescription struct {
	DataSpecifications []*ReferenceData
	Extensions         []*Extension
	IdShort            *string
	DisplayName        *LangStringSet
	Category           *string
	Description        *LangStringSet
	Id                 string
	Administration     *AdministrativeInformation
	IsCaseOf           []*ReferenceData
}

// A view is a collection of referable elements w.r.t. to a specific viewpoint of one
// or more stakeholders.
type View struct {
	DataSpecifications []*ReferenceData
	Extensions         []*Extension
	IdShort            *string
	DisplayName        *LangStringSet
	Category           *string
	Description        *LangStringSet
	SemanticId         *ReferenceData
	ContainedElements  []*Referable
}

type Reference struct {
}

// ReferenceData is a generic data type used for encoding and decoding Reference
// holding all possible types as pointer
type ReferenceData struct {
	*GlobalReference
	*ModelReference
}

// Reference to an external entity.
type GlobalReference struct {
	Values []string
}

// Reference to a model element of the same or another AAS.
// A model reference is an ordered list of keys, each key referencing an element.
// The complete list of keys may for example be concatenated to a path that then gives
// unique access to an element.
type ModelReference struct {
	Keys               []*Key
	ReferredSemanticId *ReferenceData
}

// A key is a reference to an element by its id.
type Key struct {
	Type  KeyElements
	Value string
}

// Enumeration of all identifiable elements within an asset administration shell.
type IdentifiableElements int32

const (
	IdentifiableElements_Asset_administration_shell IdentifiableElements = iota
	IdentifiableElements_Concept_description
	IdentifiableElements_Submodel
)

var IdentifiableElements_name = map[IdentifiableElements]string{
	0: "Asset_administration_shell",
	1: "Concept_description",
	2: "Submodel",
}

var IdentifiableElements_value = map[string]IdentifiableElements{
	"Asset_administration_shell": 0,
	"Concept_description":        1,
	"Submodel":                   2,
}

func (s IdentifiableElements) String() string {
	return IdentifiableElements_name[s]
}

// Enumeration of all referable elements within an asset administration shell
type ReferableElements int32

const (
	ReferableElements_Access_permission_rule ReferableElements = iota
	ReferableElements_Annotated_relationship_element
	ReferableElements_Asset
	ReferableElements_Asset_administration_shell
	ReferableElements_Basic_event
	ReferableElements_Blob
	ReferableElements_Capability
	ReferableElements_Concept_description
	ReferableElements_Data_element
	ReferableElements_Entity
	ReferableElements_Event
	ReferableElements_File
	ReferableElements_Multi_language_property
	ReferableElements_Operation
	ReferableElements_Property
	ReferableElements_Range
	ReferableElements_Reference_element
	ReferableElements_Relationship_element
	ReferableElements_Submodel
	ReferableElements_Submodel_element
	ReferableElements_Submodel_element_list
	ReferableElements_Submodel_element_struct
)

var ReferableElements_name = map[ReferableElements]string{
	0:  "Access_permission_rule",
	1:  "Annotated_relationship_element",
	2:  "Asset",
	3:  "Asset_administration_shell",
	4:  "Basic_event",
	5:  "Blob",
	6:  "Capability",
	7:  "Concept_description",
	8:  "Data_element",
	9:  "Entity",
	10: "Event",
	11: "File",
	12: "Multi_language_property",
	13: "Operation",
	14: "Property",
	15: "Range",
	16: "Reference_element",
	17: "Relationship_element",
	18: "Submodel",
	19: "Submodel_element",
	20: "Submodel_element_list",
	21: "Submodel_element_struct",
}

var ReferableElements_value = map[string]ReferableElements{
	"Access_permission_rule":         0,
	"Annotated_relationship_element": 1,
	"Asset":                          2,
	"Asset_administration_shell":     3,
	"Basic_event":                    4,
	"Blob":                           5,
	"Capability":                     6,
	"Concept_description":            7,
	"Data_element":                   8,
	"Entity":                         9,
	"Event":                          10,
	"File":                           11,
	"Multi_language_property":        12,
	"Operation":                      13,
	"Property":                       14,
	"Range":                          15,
	"Reference_element":              16,
	"Relationship_element":           17,
	"Submodel":                       18,
	"Submodel_element":               19,
	"Submodel_element_list":          20,
	"Submodel_element_struct":        21,
}

func (s ReferableElements) String() string {
	return ReferableElements_name[s]
}

// Enumeration of different key value types within a key.
type KeyElements int32

const (
	KeyElements_Fragment_reference KeyElements = iota
	KeyElements_Access_permission_rule
	KeyElements_Annotated_relationship_element
	KeyElements_Asset
	KeyElements_Asset_administration_shell
	KeyElements_Basic_event
	KeyElements_Blob
	KeyElements_Capability
	KeyElements_Concept_description
	KeyElements_Data_element
	KeyElements_Entity
	KeyElements_Event
	KeyElements_File
	KeyElements_Multi_language_property
	KeyElements_Operation
	KeyElements_Property
	KeyElements_Range
	KeyElements_Global_reference
	KeyElements_Reference_element
	KeyElements_Relationship_element
	KeyElements_Submodel
	KeyElements_Submodel_element
	KeyElements_Submodel_element_list
	KeyElements_Submodel_element_struct
)

var KeyElements_name = map[KeyElements]string{
	0:  "Fragment_reference",
	1:  "Access_permission_rule",
	2:  "Annotated_relationship_element",
	3:  "Asset",
	4:  "Asset_administration_shell",
	5:  "Basic_event",
	6:  "Blob",
	7:  "Capability",
	8:  "Concept_description",
	9:  "Data_element",
	10: "Entity",
	11: "Event",
	12: "File",
	13: "Multi_language_property",
	14: "Operation",
	15: "Property",
	16: "Range",
	17: "Global_reference",
	18: "Reference_element",
	19: "Relationship_element",
	20: "Submodel",
	21: "Submodel_element",
	22: "Submodel_element_list",
	23: "Submodel_element_struct",
}

var KeyElements_value = map[string]KeyElements{
	"Fragment_reference":             0,
	"Access_permission_rule":         1,
	"Annotated_relationship_element": 2,
	"Asset":                          3,
	"Asset_administration_shell":     4,
	"Basic_event":                    5,
	"Blob":                           6,
	"Capability":                     7,
	"Concept_description":            8,
	"Data_element":                   9,
	"Entity":                         10,
	"Event":                          11,
	"File":                           12,
	"Multi_language_property":        13,
	"Operation":                      14,
	"Property":                       15,
	"Range":                          16,
	"Global_reference":               17,
	"Reference_element":              18,
	"Relationship_element":           19,
	"Submodel":                       20,
	"Submodel_element":               21,
	"Submodel_element_list":          22,
	"Submodel_element_struct":        23,
}

func (s KeyElements) String() string {
	return KeyElements_name[s]
}

// Enumeration of all referable elements within an asset administration shell.
type SubmodelElements int32

const (
	SubmodelElements_Annotated_relationship_element SubmodelElements = iota
	SubmodelElements_Asset
	SubmodelElements_Asset_administration_shell
	SubmodelElements_Basic_event
	SubmodelElements_Blob
	SubmodelElements_Capability
	SubmodelElements_Concept_description
	SubmodelElements_Data_element
	SubmodelElements_Entity
	SubmodelElements_Event
	SubmodelElements_File
	SubmodelElements_Multi_language_property
	SubmodelElements_Operation
	SubmodelElements_Property
	SubmodelElements_Range
	SubmodelElements_Reference_element
	SubmodelElements_Relationship_element
	SubmodelElements_Submodel
	SubmodelElements_Submodel_element
	SubmodelElements_Submodel_element_list
	SubmodelElements_Submodel_element_struct
)

var SubmodelElements_name = map[SubmodelElements]string{
	0:  "Annotated_relationship_element",
	1:  "Asset",
	2:  "Asset_administration_shell",
	3:  "Basic_event",
	4:  "Blob",
	5:  "Capability",
	6:  "Concept_description",
	7:  "Data_element",
	8:  "Entity",
	9:  "Event",
	10: "File",
	11: "Multi_language_property",
	12: "Operation",
	13: "Property",
	14: "Range",
	15: "Reference_element",
	16: "Relationship_element",
	17: "Submodel",
	18: "Submodel_element",
	19: "Submodel_element_list",
	20: "Submodel_element_struct",
}

var SubmodelElements_value = map[string]SubmodelElements{
	"Annotated_relationship_element": 0,
	"Asset":                          1,
	"Asset_administration_shell":     2,
	"Basic_event":                    3,
	"Blob":                           4,
	"Capability":                     5,
	"Concept_description":            6,
	"Data_element":                   7,
	"Entity":                         8,
	"Event":                          9,
	"File":                           10,
	"Multi_language_property":        11,
	"Operation":                      12,
	"Property":                       13,
	"Range":                          14,
	"Reference_element":              15,
	"Relationship_element":           16,
	"Submodel":                       17,
	"Submodel_element":               18,
	"Submodel_element_list":          19,
	"Submodel_element_struct":        20,
}

func (s SubmodelElements) String() string {
	return SubmodelElements_name[s]
}

type BuildInListTypes int32

const (
	BuildInListTypes_Entities BuildInListTypes = iota
	BuildInListTypes_ID_refs
	BuildInListTypes_N_M_tokens
)

var BuildInListTypes_name = map[BuildInListTypes]string{
	0: "Entities",
	1: "ID_refs",
	2: "N_M_tokens",
}

var BuildInListTypes_value = map[string]BuildInListTypes{
	"Entities":   0,
	"ID_refs":    1,
	"N_M_tokens": 2,
}

func (s BuildInListTypes) String() string {
	return BuildInListTypes_name[s]
}

type DecimalBuildInTypes int32

const (
	DecimalBuildInTypes_Integer DecimalBuildInTypes = iota
	DecimalBuildInTypes_Long
	DecimalBuildInTypes_Int
	DecimalBuildInTypes_Short
	DecimalBuildInTypes_Byte
	DecimalBuildInTypes_Non_negative_integer
	DecimalBuildInTypes_Positive_integer
	DecimalBuildInTypes_Unsigned_integer
	DecimalBuildInTypes_Unsigned_long
	DecimalBuildInTypes_Unsigned_int
	DecimalBuildInTypes_Unsigned_short
	DecimalBuildInTypes_Unsigned_byte
	DecimalBuildInTypes_Non_positive_integer
	DecimalBuildInTypes_Negative_integer
)

var DecimalBuildInTypes_name = map[DecimalBuildInTypes]string{
	0:  "Integer",
	1:  "Long",
	2:  "Int",
	3:  "Short",
	4:  "Byte",
	5:  "Non_negative_integer",
	6:  "Positive_integer",
	7:  "Unsigned_integer",
	8:  "Unsigned_long",
	9:  "Unsigned_int",
	10: "Unsigned_short",
	11: "Unsigned_byte",
	12: "Non_positive_integer",
	13: "Negative_integer",
}

var DecimalBuildInTypes_value = map[string]DecimalBuildInTypes{
	"Integer":              0,
	"Long":                 1,
	"Int":                  2,
	"Short":                3,
	"Byte":                 4,
	"Non_negative_integer": 5,
	"Positive_integer":     6,
	"Unsigned_integer":     7,
	"Unsigned_long":        8,
	"Unsigned_int":         9,
	"Unsigned_short":       10,
	"Unsigned_byte":        11,
	"Non_positive_integer": 12,
	"Negative_integer":     13,
}

func (s DecimalBuildInTypes) String() string {
	return DecimalBuildInTypes_name[s]
}

type DurationBuildInTypes int32

const (
	DurationBuildInTypes_Day_time_duration DurationBuildInTypes = iota
	DurationBuildInTypes_Year_month_duration
)

var DurationBuildInTypes_name = map[DurationBuildInTypes]string{
	0: "Day_time_duration",
	1: "Year_month_duration",
}

var DurationBuildInTypes_value = map[string]DurationBuildInTypes{
	"Day_time_duration":   0,
	"Year_month_duration": 1,
}

func (s DurationBuildInTypes) String() string {
	return DurationBuildInTypes_name[s]
}

type PrimitiveTypes int32

const (
	PrimitiveTypes_Any_URI PrimitiveTypes = iota
	PrimitiveTypes_Base_64_binary
	PrimitiveTypes_Boolean
	PrimitiveTypes_Date
	PrimitiveTypes_Date_time
	PrimitiveTypes_Decimal
	PrimitiveTypes_Double
	PrimitiveTypes_Duration
	PrimitiveTypes_Float
	PrimitiveTypes_G_day
	PrimitiveTypes_G_month
	PrimitiveTypes_G_month_day
	PrimitiveTypes_Hey_binary
	PrimitiveTypes_Notation
	PrimitiveTypes_Q_name
	PrimitiveTypes_String
	PrimitiveTypes_Time
)

var PrimitiveTypes_name = map[PrimitiveTypes]string{
	0:  "Any_URI",
	1:  "Base_64_binary",
	2:  "Boolean",
	3:  "Date",
	4:  "Date_time",
	5:  "Decimal",
	6:  "Double",
	7:  "Duration",
	8:  "Float",
	9:  "G_day",
	10: "G_month",
	11: "G_month_day",
	12: "Hey_binary",
	13: "Notation",
	14: "Q_name",
	15: "String",
	16: "Time",
}

var PrimitiveTypes_value = map[string]PrimitiveTypes{
	"Any_URI":        0,
	"Base_64_binary": 1,
	"Boolean":        2,
	"Date":           3,
	"Date_time":      4,
	"Decimal":        5,
	"Double":         6,
	"Duration":       7,
	"Float":          8,
	"G_day":          9,
	"G_month":        10,
	"G_month_day":    11,
	"Hey_binary":     12,
	"Notation":       13,
	"Q_name":         14,
	"String":         15,
	"Time":           16,
}

func (s PrimitiveTypes) String() string {
	return PrimitiveTypes_name[s]
}

type StringBuildInTypes int32

const (
	StringBuildInTypes_Normalized_string StringBuildInTypes = iota
	StringBuildInTypes_Token
	StringBuildInTypes_Language
	StringBuildInTypes_N_C_name
	StringBuildInTypes_Entity
	StringBuildInTypes_ID
	StringBuildInTypes_IDREF
)

var StringBuildInTypes_name = map[StringBuildInTypes]string{
	0: "Normalized_string",
	1: "Token",
	2: "Language",
	3: "N_C_name",
	4: "Entity",
	5: "ID",
	6: "IDREF",
}

var StringBuildInTypes_value = map[string]StringBuildInTypes{
	"Normalized_string": 0,
	"Token":             1,
	"Language":          2,
	"N_C_name":          3,
	"Entity":            4,
	"ID":                5,
	"IDREF":             6,
}

func (s StringBuildInTypes) String() string {
	return StringBuildInTypes_name[s]
}

// Enumeration listing all xsd anySimpleTypes
type DataTypeDef int32

const (
	DataTypeDef_Entities DataTypeDef = iota
	DataTypeDef_ID_refs
	DataTypeDef_N_M_tokens
	DataTypeDef_Integer
	DataTypeDef_Long
	DataTypeDef_Int
	DataTypeDef_Short
	DataTypeDef_Byte
	DataTypeDef_Non_negative_integer
	DataTypeDef_Positive_integer
	DataTypeDef_Unsigned_integer
	DataTypeDef_Unsigned_long
	DataTypeDef_Unsigned_int
	DataTypeDef_Unsigned_short
	DataTypeDef_Unsigned_byte
	DataTypeDef_Non_positive_integer
	DataTypeDef_Negative_integer
	DataTypeDef_Day_time_duration
	DataTypeDef_Year_month_duration
	DataTypeDef_Any_URI
	DataTypeDef_Base_64_binary
	DataTypeDef_Boolean
	DataTypeDef_Date
	DataTypeDef_Date_time
	DataTypeDef_Decimal
	DataTypeDef_Double
	DataTypeDef_Duration
	DataTypeDef_Float
	DataTypeDef_G_day
	DataTypeDef_G_month
	DataTypeDef_G_month_day
	DataTypeDef_Hey_binary
	DataTypeDef_Notation
	DataTypeDef_Q_name
	DataTypeDef_String
	DataTypeDef_Time
	DataTypeDef_Normalized_string
	DataTypeDef_Token
	DataTypeDef_Language
	DataTypeDef_N_C_name
	DataTypeDef_Entity
	DataTypeDef_ID
	DataTypeDef_IDREF
)

var DataTypeDef_name = map[DataTypeDef]string{
	0:  "Entities",
	1:  "ID_refs",
	2:  "N_M_tokens",
	3:  "Integer",
	4:  "Long",
	5:  "Int",
	6:  "Short",
	7:  "Byte",
	8:  "Non_negative_integer",
	9:  "Positive_integer",
	10: "Unsigned_integer",
	11: "Unsigned_long",
	12: "Unsigned_int",
	13: "Unsigned_short",
	14: "Unsigned_byte",
	15: "Non_positive_integer",
	16: "Negative_integer",
	17: "Day_time_duration",
	18: "Year_month_duration",
	19: "Any_URI",
	20: "Base_64_binary",
	21: "Boolean",
	22: "Date",
	23: "Date_time",
	24: "Decimal",
	25: "Double",
	26: "Duration",
	27: "Float",
	28: "G_day",
	29: "G_month",
	30: "G_month_day",
	31: "Hey_binary",
	32: "Notation",
	33: "Q_name",
	34: "String",
	35: "Time",
	36: "Normalized_string",
	37: "Token",
	38: "Language",
	39: "N_C_name",
	40: "Entity",
	41: "ID",
	42: "IDREF",
}

var DataTypeDef_value = map[string]DataTypeDef{
	"Entities":             0,
	"ID_refs":              1,
	"N_M_tokens":           2,
	"Integer":              3,
	"Long":                 4,
	"Int":                  5,
	"Short":                6,
	"Byte":                 7,
	"Non_negative_integer": 8,
	"Positive_integer":     9,
	"Unsigned_integer":     10,
	"Unsigned_long":        11,
	"Unsigned_int":         12,
	"Unsigned_short":       13,
	"Unsigned_byte":        14,
	"Non_positive_integer": 15,
	"Negative_integer":     16,
	"Day_time_duration":    17,
	"Year_month_duration":  18,
	"Any_URI":              19,
	"Base_64_binary":       20,
	"Boolean":              21,
	"Date":                 22,
	"Date_time":            23,
	"Decimal":              24,
	"Double":               25,
	"Duration":             26,
	"Float":                27,
	"G_day":                28,
	"G_month":              29,
	"G_month_day":          30,
	"Hey_binary":           31,
	"Notation":             32,
	"Q_name":               33,
	"String":               34,
	"Time":                 35,
	"Normalized_string":    36,
	"Token":                37,
	"Language":             38,
	"N_C_name":             39,
	"Entity":               40,
	"ID":                   41,
	"IDREF":                42,
}

func (s DataTypeDef) String() string {
	return DataTypeDef_name[s]
}

type LangStringSet struct{}

type DataTypeIec61360 int32

const (
	DataTypeIec61360_Date DataTypeIec61360 = iota
	DataTypeIec61360_String
	DataTypeIec61360_String_translatable
	DataTypeIec61360_Integer_Measure
	DataTypeIec61360_Integer_count
	DataTypeIec61360_Integer_currency
	DataTypeIec61360_Real_measure
	DataTypeIec61360_Real_count
	DataTypeIec61360_Real_currency
	DataTypeIec61360_Boolean
	DataTypeIec61360_IRI
	DataTypeIec61360_IRDI
	DataTypeIec61360_Rational
	DataTypeIec61360_Rational_measure
	DataTypeIec61360_Time
	DataTypeIec61360_Timestamp
	DataTypeIec61360_File
	DataTypeIec61360_HTML
	DataTypeIec61360_Blob
)

var DataTypeIec61360_name = map[DataTypeIec61360]string{
	0:  "Date",
	1:  "String",
	2:  "String_translatable",
	3:  "Integer_Measure",
	4:  "Integer_count",
	5:  "Integer_currency",
	6:  "Real_measure",
	7:  "Real_count",
	8:  "Real_currency",
	9:  "Boolean",
	10: "IRI",
	11: "IRDI",
	12: "Rational",
	13: "Rational_measure",
	14: "Time",
	15: "Timestamp",
	16: "File",
	17: "HTML",
	18: "Blob",
}

var DataTypeIec61360_value = map[string]DataTypeIec61360{
	"Date":                0,
	"String":              1,
	"String_translatable": 2,
	"Integer_Measure":     3,
	"Integer_count":       4,
	"Integer_currency":    5,
	"Real_measure":        6,
	"Real_count":          7,
	"Real_currency":       8,
	"Boolean":             9,
	"IRI":                 10,
	"IRDI":                11,
	"Rational":            12,
	"Rational_measure":    13,
	"Time":                14,
	"Timestamp":           15,
	"File":                16,
	"HTML":                17,
	"Blob":                18,
}

func (s DataTypeIec61360) String() string {
	return DataTypeIec61360_name[s]
}

type LevelType int32

const (
	LevelType_Min LevelType = iota
	LevelType_Max
	LevelType_Nom
	LevelType_Type
)

var LevelType_name = map[LevelType]string{
	0: "Min",
	1: "Max",
	2: "Nom",
	3: "Type",
}

var LevelType_value = map[string]LevelType{
	"Min":  0,
	"Max":  1,
	"Nom":  2,
	"Type": 3,
}

func (s LevelType) String() string {
	return LevelType_name[s]
}

// A value reference pair within a value list. Each value has a global unique id
// defining its semantic.
type ValueReferencePair struct {
	Value   string
	ValueId *ReferenceData
}

// A set of value reference pairs.
type ValueList struct {
	ValueReferencePairs []*ValueReferencePair
}

// Content of data specification template for concept descriptions conformant to
// IEC 61360.
type DataSpecificationIec61360 struct {
	PreferredName      *LangStringSet
	ShortName          *LangStringSet
	Unit               *string
	UnitId             *ReferenceData
	SourceOfDefinition *string
	Symbol             *string
	DataType           *DataTypeIec61360
	Definition         *LangStringSet
	ValueFormat        *string
	ValueList          *ValueList
	Value              *string
	ValueId            *ReferenceData
	LevelType          *LevelType
}

// TODO
type DataSpecificationPhysicalUnit struct {
	UnitName                *string
	UnitSymbol              *string
	Definition              *LangStringSet
	SiNotation              *string
	DinNotation             *string
	EceName                 *string
	EceCode                 *string
	NistName                *string
	SourceOfDefinition      *string
	ConversionFactor        *string
	RegistrationAuthorityId *string
	Supplier                *string
}

// Model the environment as the entry point for referencing and serialization.
type Environment struct {
	AssetAdministrationShells []*AssetAdministrationShell
	Submodels                 []*Submodel
	ConceptDescriptions       []*ConceptDescription
}
