// Marshaler is the interface implemented by all types of the meta-model
// that can marshal themselves into a valid JSON.
type Marshaler interface {
	marshalJSON(stream *json.Stream) error
}

// Unmarshaler is the interface implemented by all types of the meta-model
// that can unmarshal a JSON description of themselves.
type Unmarshaler interface {
	unmarshalJSON(iter *json.Iterator) error
}

// Encoder writes JSON values to an output stream.
type Encoder struct {
	stream *json.Stream
}

// Decoder reads and decodes JSON values from an input stream.
type Decoder struct {
	iter *json.Iterator
}

// NewDecoder returns a new Decoder that reads from r.
// Bs is the internal buffer size set in the NewDecoder.
func NewDecoder(bs int, r io.Reader) *Decoder {
	iter := json.Parse(json.ConfigDefault, r, bs)
	return &Decoder{iter}
}

// NewEcoder returns a new Encoder that writes to w.
// Bs is the internal buffer size set in the NewEncoder.
func NewEncoder(bs int, w io.Writer) *Encoder {
	stream := json.NewStream(json.ConfigDefault, w, bs)
	return &Encoder{stream}
}

// Decode reads the next encoded value from its input and
// writes it in the value pointed to by v. V must implement
// the Unmarshaler interface.
func (d *Decoder) Decode(v Unmarshaler) error {
	v.unmarshalJSON(d.iter)
	err := d.iter.Error
	if err == io.EOF {
		return nil
	}
	return d.iter.Error
}

// Encode writes the encoding of v to the input stream v
// V must implement the Marshaler interface.
func (e *Encoder) Encode(v Marshaler) error {
	v.marshalJSON(e.stream)
	e.stream.WriteRaw("\n")
	e.stream.Flush()
	return e.stream.Error
}
